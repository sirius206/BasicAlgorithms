        PriorityQueue<node> heap = new PriorityQueue<node>(new Comparator<node>(){    //capital C
             @Override    //capital O
            public int compare(node o1, node o2){
                if(o1.dist == o2.dist){
                    if(o1.worker == o2.worker){
                        return o1.bike - o2.bike;
                    }
                    return o1.worker - o2.worker;
                }else{
                    return o1.dist - o2.dist;
                }
            }
        });


    Arrays.sort(
        intervals,
        new Comparator<int[]>() {
          public int compare(final int[] a, final int[] b) {
            return a[0] - b[0];
          }
        });
        

    PriorityQueue<Integer> allocator =
        new PriorityQueue<Integer>(
            intervals.length,
            new Comparator<Integer>() {
              public int compare(Integer a, Integer b) {
                return a - b;
              }
            });
